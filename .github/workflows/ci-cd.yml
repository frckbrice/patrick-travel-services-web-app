name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    NODE_VERSION: "20.x"
    PNPM_VERSION: "8.x"

jobs:
    # Code Quality Checks
    quality:
        name: Code Quality
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run ESLint
              run: pnpm lint

            - name: Check code formatting
              run: pnpm format:check

            - name: Type checking
              run: pnpm type-check

    # Build Application
    build:
        name: Build Application
        runs-on: ubuntu-latest
        needs: quality

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Generate Prisma Client
              run: pnpm prisma:generate

            - name: Build application
              run: pnpm build
              env:
                  NEXT_TELEMETRY_DISABLED: 1

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      .next
                      public
                  retention-days: 1

    # Docker Build and Push
    docker:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKER_USERNAME }}/patrick-travel-web
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/patrick-travel-web:buildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/patrick-travel-web:buildcache,mode=max
                  platforms: linux/amd64,linux/arm64

    # Security Scan
    security:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: quality

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run security audit
              run: pnpm audit --audit-level=moderate
              continue-on-error: true

    # Deployment (Optional - configure based on your deployment target)
    deploy:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [build, docker]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        environment:
            name: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy notification
              run: |
                  echo "ðŸš€ Deployment successful!"
                  echo "Docker image pushed: ${{ secrets.DOCKER_USERNAME }}/patrick-travel-web:latest"

            # Add your deployment steps here
            # Examples:
            # - Deploy to Vercel
            # - Deploy to AWS ECS
            # - Deploy to Kubernetes
            # - SSH to server and pull new Docker image
