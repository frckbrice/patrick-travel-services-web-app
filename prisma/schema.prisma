// Prisma schema for Patrick Travel Services

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String // hashed
  firstName         String
  lastName          String
  phone             String?
  profilePicture    String? // For Google OAuth profile photos
  role              Role      @default(CLIENT)
  isActive          Boolean   @default(true)
  isVerified        Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // GDPR Consent Fields (for mobile and web compliance)
  consentedAt        DateTime? // Initial consent timestamp
  acceptedTerms      Boolean?  // User accepted terms and conditions
  acceptedPrivacy    Boolean?  // User accepted privacy policy
  termsAcceptedAt    DateTime? // When terms were accepted
  privacyAcceptedAt  DateTime? // When privacy policy was accepted
  dataExportRequests Int       @default(0) // Counter for data export requests
  lastDataExport     DateTime? // Last time user exported data

  // Account Deletion Fields (GDPR Right to Erasure)
  deletionScheduledFor DateTime? // When permanent deletion is scheduled (30 days after request)
  deletionReason       String?   // Optional reason for deletion

  // Relations
  cases                Case[]              @relation("ClientCases")
  assignedCases        Case[]              @relation("AgentCases")
  sentMessages         Message[]           @relation("SentMessages")
  receivedMessages     Message[]           @relation("ReceivedMessages")
  documents            Document[]
  notifications        Notification[]
  activityLogs         ActivityLog[]
  inviteCodesCreated   InviteCode[]          @relation("CreatedInviteCodes")
  inviteCodesLastUsed  InviteCode[]          @relation("LastUsedInviteCodes")
  inviteUsages         InviteUsage[]         @relation("UserInviteUsages")
  transferredFrom      TransferHistory[]     @relation("TransferFrom")
  transferredTo        TransferHistory[]     @relation("TransferTo")
  transfersInitiated   TransferHistory[]     @relation("TransferInitiator")
  templatesCreated     DocumentTemplate[]    @relation("TemplatesCreated")

  @@index([email])
  @@index([role])
}

enum Role {
  CLIENT
  AGENT
  ADMIN
}

// Case Model
model Case {
  id                  String      @id @default(uuid())
  referenceNumber     String      @unique
  clientId            String
  client              User        @relation("ClientCases", fields: [clientId], references: [id])
  assignedAgentId     String?
  assignedAgent       User?       @relation("AgentCases", fields: [assignedAgentId], references: [id])
  serviceType         ServiceType
  status              CaseStatus  @default(SUBMITTED)
  priority            Priority    @default(NORMAL)
  submissionDate      DateTime    @default(now())
  lastUpdated         DateTime    @updatedAt
  internalNotes       String?     @db.Text
  estimatedCompletion DateTime?

  // Relations
  documents       Document[]
  messages        Message[]
  statusHistory   StatusHistory[]
  notifications   Notification[]
  formData        CaseFormData?
  transferHistory TransferHistory[]

  @@index([clientId])
  @@index([assignedAgentId])
  @@index([status])
  @@index([serviceType])
  @@index([referenceNumber])
}

enum ServiceType {
  STUDENT_VISA
  WORK_PERMIT
  FAMILY_REUNIFICATION
  TOURIST_VISA
  BUSINESS_VISA
  PERMANENT_RESIDENCY
}

enum CaseStatus {
  SUBMITTED
  UNDER_REVIEW
  DOCUMENTS_REQUIRED
  PROCESSING
  APPROVED
  REJECTED
  CLOSED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// CaseFormData Model (JSON field for dynamic form data)
model CaseFormData {
  id        String   @id @default(uuid())
  caseId    String   @unique
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  data      Json // Flexible JSON structure for different service types
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// StatusHistory Model (for timeline tracking)
model StatusHistory {
  id        String     @id @default(uuid())
  caseId    String
  case      Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  status    CaseStatus
  changedBy String
  notes     String?
  timestamp DateTime   @default(now())

  @@index([caseId])
  @@index([timestamp])
}

// Document Model
model Document {
  id              String         @id @default(uuid())
  caseId          String
  case            Case           @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploadedById    String
  uploadedBy      User           @relation(fields: [uploadedById], references: [id])
  fileName        String
  originalName    String
  filePath        String
  fileSize        Int
  mimeType        String
  documentType    DocumentType
  status          DocumentStatus @default(PENDING)
  uploadDate      DateTime       @default(now())
  verifiedBy      String?
  verifiedAt      DateTime?
  rejectionReason String?

  @@index([caseId])
  @@index([status])
}

enum DocumentType {
  PASSPORT
  ID_CARD
  BIRTH_CERTIFICATE
  MARRIAGE_CERTIFICATE
  DIPLOMA
  EMPLOYMENT_LETTER
  BANK_STATEMENT
  PROOF_OF_RESIDENCE
  PHOTO
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

// Message Model
model Message {
  id            String       @id @default(uuid())
  senderId      String
  sender        User         @relation("SentMessages", fields: [senderId], references: [id])
  recipientId   String
  recipient     User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  caseId        String?
  case          Case?        @relation(fields: [caseId], references: [id])
  subject       String?
  content       String       @db.Text
  isRead        Boolean      @default(false)
  readAt        DateTime?
  sentAt        DateTime     @default(now())
  attachments   Json? // Array of file references
  messageType   MessageType  @default(CHAT) // CHAT or EMAIL
  emailThreadId String? // For tracking email replies
  replyToId     String? // ID of message being replied to

  @@index([senderId])
  @@index([recipientId])
  @@index([caseId])
  @@index([isRead])
  @@index([messageType])
  @@index([emailThreadId])
}

enum MessageType {
  CHAT
  EMAIL
}

// Notification Model
model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  caseId    String?
  case      Case?            @relation(fields: [caseId], references: [id])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  actionUrl String?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  CASE_STATUS_UPDATE
  NEW_MESSAGE
  NEW_EMAIL
  DOCUMENT_UPLOADED
  DOCUMENT_VERIFIED
  DOCUMENT_REJECTED
  CASE_ASSIGNED
  SYSTEM_ANNOUNCEMENT
}

// ActivityLog Model
model ActivityLog {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String
  description String
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  timestamp   DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@index([action])
}

// FAQ Model
model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String   @db.Text
  category  String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

// DocumentTemplate Model
model DocumentTemplate {
  id            String       @id @default(uuid())
  name          String       // "Student Visa Application Form"
  description   String       @db.Text // Detailed description
  serviceType   ServiceType? // Optional - which service needs this
  fileUrl       String       // URL to template file
  fileName      String       // "student-visa-form.pdf"
  fileSize      Int          // File size in bytes
  mimeType      String       // "application/pdf"
  category      String       // "FORM", "GUIDE", "SAMPLE", "CHECKLIST"
  isRequired    Boolean      @default(false) // Must be submitted for this service?
  isActive      Boolean      @default(true) // Visible to clients?
  downloadCount Int          @default(0) // Track popularity
  version       String?      // "v2.1" for versioning
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdById   String?      // Admin who uploaded it
  createdBy     User?        @relation("TemplatesCreated", fields: [createdById], references: [id])

  @@index([serviceType])
  @@index([category])
  @@index([isActive])
  @@index([isRequired])
}

// SystemSetting Model
model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String   @db.Text
  category  String
  updatedAt DateTime @updatedAt
  updatedBy String

  @@index([key])
  @@index([category])
}

model InviteCode {
  id           String    @id @default(uuid())
  code         String    @unique
  role         Role
  createdById  String
  createdByUser User     @relation("CreatedInviteCodes", fields: [createdById], references: [id])
  lastUsedById String? // Most recent user who used this code
  lastUsedByUser User?  @relation("LastUsedInviteCodes", fields: [lastUsedById], references: [id])
  maxUses      Int       @default(1)
  usedCount    Int       @default(0)
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  purpose      String?   // Optional: 'SEED', 'ADMIN_CREATED', etc. for tracking origin
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime? // Most recent usage timestamp

  // Relations
  usages InviteUsage[] // Complete history of all uses

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdById])
  @@index([lastUsedById])
  @@index([purpose])
}

// InviteUsage Model - Tracks individual invite code usage
// Maintains referential integrity with User model for audit trail
// userId references User.id (Firebase UID) - SetNull on delete preserves history
model InviteUsage {
  id           String     @id @default(uuid())
  inviteCodeId String
  inviteCode   InviteCode @relation(fields: [inviteCodeId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?      @relation("UserInviteUsages", fields: [userId], references: [id], onDelete: SetNull)
  usedAt       DateTime   @default(now())

  @@index([inviteCodeId])
  @@index([userId])
  @@index([usedAt])
}

// TransferHistory Model - Tracks case transfers between agents
model TransferHistory {
  id     String @id @default(uuid())
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  // Agent who transferred the case (nullable - case could be from unassigned)
  fromAgentId   String?
  fromAgent     User?   @relation("TransferFrom", fields: [fromAgentId], references: [id], onDelete: SetNull)
  fromAgentName String? // Denormalized for historical record

  // Agent who received the case
  toAgentId   String
  toAgent     User   @relation("TransferTo", fields: [toAgentId], references: [id], onDelete: Cascade)
  toAgentName String // Denormalized for historical record

  // User who initiated the transfer (typically an admin)
  transferredBy     String?
  transferredByUser User?   @relation("TransferInitiator", fields: [transferredBy], references: [id], onDelete: SetNull)

  reason        TransferReason
  handoverNotes String?        @db.Text
  transferredAt DateTime       @default(now())

  notifyClient Boolean @default(true)
  notifyAgent  Boolean @default(true)

  @@index([caseId])
  @@index([fromAgentId])
  @@index([toAgentId])
  @@index([transferredBy])
  @@index([transferredAt])
}

enum TransferReason {
  REASSIGNMENT
  COVERAGE
  SPECIALIZATION
  WORKLOAD
  OTHER
}

// ============================================
// HYBRID CHAT ARCHITECTURE
// Real-time in Firebase + Archive in Neon
// ============================================

// Chat message archive for SQL queries, search, analytics
model ChatMessage {
  id              String    @id @default(uuid())
  firebaseId      String    @unique // Link to Firebase Realtime DB message
  senderId        String
  senderName      String
  senderEmail     String
  recipientId     String
  recipientName   String
  recipientEmail  String
  content         String    @db.Text
  caseId          String?
  subject         String?
  isRead          Boolean   @default(false)
  readAt          DateTime?
  sentAt          DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  // Attachments stored as JSON (same structure as Firebase)
  attachments     Json?

  @@index([senderId])
  @@index([recipientId])
  @@index([caseId])
  @@index([sentAt])
  @@index([firebaseId])
  @@index([isRead])
  @@index([senderId, recipientId, sentAt])
}

// Chat room metadata archive
model ChatRoom {
  id              String    @id @default(uuid())
  firebaseId      String    @unique // Link to Firebase Realtime DB room
  participantIds  String[]  // Array of user IDs
  caseId          String?
  lastMessage     String?   @db.Text
  lastMessageAt   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([firebaseId])
  @@index([caseId])
  @@index([lastMessageAt])
}

// Contact Model - Stores contact form submissions
model Contact {
  id        String        @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum ContactStatus {
  NEW
  REVIEWED
  RESPONDED
  CLOSED
}
