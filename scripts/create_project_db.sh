# #!/bin/bash

# # --------------------------------------------
# # Script interactif pour cr√©er une base projet
# # et un utilisateur PostgreSQL sur macOS
# # --------------------------------------------

# # Superutilisateur PostgreSQL (nom de l'utilisateur macOS)
# PG_SUPERUSER=$(whoami)

# # √âtape interactive : demander les infos du projet
# read -p "Nom de la base projet : " PG_PROJECT_DB
# read -p "Nom de l'utilisateur projet : " PG_PROJECT_USER
# read -s -p "Mot de passe pour l'utilisateur projet : " PG_PROJECT_PASSWORD
# echo -e "\n‚úÖ Informations projet :"
# echo "Base : $PG_PROJECT_DB"
# echo "Utilisateur : $PG_PROJECT_USER"

# # D√©finir les locales
# export LC_ALL=en_US.UTF-8
# export LANG=en_US.UTF-8

# # 1Ô∏è‚É£ Cr√©er la base si elle n'existe pas
# DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='$PG_PROJECT_DB'" postgres)
# if [ "$DB_EXISTS" = "1" ]; then
#     echo "‚ö†Ô∏è Base $PG_PROJECT_DB existe d√©j√†"
# else
#     psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres -c "CREATE DATABASE $PG_PROJECT_DB;"
#     echo "‚úÖ Base $PG_PROJECT_DB cr√©√©e"
# fi

# # 2Ô∏è‚É£ Cr√©er l'utilisateur projet si n√©cessaire
# USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$PG_PROJECT_USER'" postgres)
# if [ "$USER_EXISTS" = "1" ]; then
#     echo "‚ö†Ô∏è Utilisateur $PG_PROJECT_USER existe d√©j√†"
# else
#     psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
#         -c "CREATE USER $PG_PROJECT_USER WITH ENCRYPTED PASSWORD '$PG_PROJECT_PASSWORD';"
#     echo "‚úÖ Utilisateur $PG_PROJECT_USER cr√©√©"
# fi

# # 3Ô∏è‚É£ Accorder les privil√®ges g√©n√©raux (inclut CREATEDB)
# psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
#     -c "ALTER USER $PG_PROJECT_USER CREATEDB;"
# psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
#     -c "GRANT ALL PRIVILEGES ON DATABASE $PG_PROJECT_DB TO $PG_PROJECT_USER;"

# # 4Ô∏è‚É£ Accorder les privil√®ges sur le sch√©ma public
# psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname="$PG_PROJECT_DB" <<-EOSQL
# GRANT CONNECT ON DATABASE $PG_PROJECT_DB TO $PG_PROJECT_USER;
# GRANT USAGE ON SCHEMA public TO $PG_PROJECT_USER;
# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO $PG_PROJECT_USER;
# GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO $PG_PROJECT_USER;
# ALTER DEFAULT PRIVILEGES IN SCHEMA public
# GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO $PG_PROJECT_USER;
# GRANT ALL ON SCHEMA public TO $PG_PROJECT_USER;
# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $PG_PROJECT_USER;
# GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $PG_PROJECT_USER;
# ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $PG_PROJECT_USER;
# ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $PG_PROJECT_USER;
# EOSQL

# # 5Ô∏è‚É£ D√©marrer PostgreSQL via Homebrew
# # brew services start postgresql@17
# pg_ctl -D /usr/local/var/postgresql@17 start
# sleep 3

# # V√©rifier la connexion
# pg_isready -h localhost -p 5432
# if [ $? -eq 0 ]; then
#   echo "‚úÖ PostgreSQL √©coute sur localhost:5432"
# else
#   echo "‚ùå PostgreSQL n'√©coute pas sur le port 5432"
#   exit 1
# fi

# echo "‚úÖ Base $PG_PROJECT_DB et utilisateur $PG_PROJECT_USER configur√©s avec succ√®s pour ce projet."

#!/bin/bash

# --------------------------------------------
# Script interactif pour cr√©er une base projet
# et un utilisateur PostgreSQL sur macOS
# avec v√©rification intelligente du serveur
# --------------------------------------------

PG_VERSION="17"
PG_DATA_DIR="/usr/local/var/postgresql@${PG_VERSION}"
PG_CTL="/usr/local/opt/postgresql@${PG_VERSION}/bin/pg_ctl"
PG_PORT=5432
PG_SUPERUSER=$(whoami)

echo "üîç V√©rification du statut de PostgreSQL..."

# V√©rifie si un fichier PID existe
if [ -f "${PG_DATA_DIR}/postmaster.pid" ]; then
    PID=$(head -1 "${PG_DATA_DIR}/postmaster.pid")
    if ps -p "$PID" > /dev/null 2>&1; then
        echo "‚ö†Ô∏è PostgreSQL est d√©j√† en cours d'ex√©cution (PID: $PID)"
    else
        echo "üö® Fichier PID trouv√© mais le processus $PID ne tourne pas."
        echo "üßπ Nettoyage du fichier postmaster.pid..."
        rm -f "${PG_DATA_DIR}/postmaster.pid"
        echo "‚ôªÔ∏è D√©marrage du serveur PostgreSQL..."
        "$PG_CTL" -D "$PG_DATA_DIR" start
        sleep 3
    fi
else
    echo "üü¢ Aucun processus PostgreSQL d√©tect√©, d√©marrage du serveur..."
    "$PG_CTL" -D "$PG_DATA_DIR" start
    sleep 3
fi

# V√©rifie la connexion apr√®s tentative de d√©marrage
pg_isready -h localhost -p "$PG_PORT" > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "‚úÖ PostgreSQL √©coute sur localhost:$PG_PORT"
else
  echo "‚ùå PostgreSQL ne semble pas d√©marr√© correctement"
  exit 1
fi

# √âtape interactive : demander les infos du projet
read -p "Nom de la base projet : " PG_PROJECT_DB
read -p "Nom de l'utilisateur projet : " PG_PROJECT_USER
read -s -p "Mot de passe pour l'utilisateur projet : " PG_PROJECT_PASSWORD
echo -e "\n‚úÖ Informations projet :"
echo "Base : $PG_PROJECT_DB"
echo "Utilisateur : $PG_PROJECT_USER"

# D√©finir les locales
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# 1Ô∏è‚É£ Cr√©er la base si elle n'existe pas
DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='$PG_PROJECT_DB'" postgres)
if [ "$DB_EXISTS" = "1" ]; then
    echo "‚ö†Ô∏è Base $PG_PROJECT_DB existe d√©j√†"
else
    psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres -c "CREATE DATABASE $PG_PROJECT_DB;"
    echo "‚úÖ Base $PG_PROJECT_DB cr√©√©e"
fi

# 2Ô∏è‚É£ Cr√©er l'utilisateur projet si n√©cessaire
USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$PG_PROJECT_USER'" postgres)
if [ "$USER_EXISTS" = "1" ]; then
    echo "‚ö†Ô∏è Utilisateur $PG_PROJECT_USER existe d√©j√†"
else
    psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
        -c "CREATE USER $PG_PROJECT_USER WITH ENCRYPTED PASSWORD '$PG_PROJECT_PASSWORD';"
    echo "‚úÖ Utilisateur $PG_PROJECT_USER cr√©√©"
fi

# 3Ô∏è‚É£ Accorder les privil√®ges g√©n√©raux (inclut CREATEDB)
psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
    -c "ALTER USER $PG_PROJECT_USER CREATEDB;"
psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname=postgres \
    -c "GRANT ALL PRIVILEGES ON DATABASE $PG_PROJECT_DB TO $PG_PROJECT_USER;"

# 4Ô∏è‚É£ Accorder les privil√®ges sur le sch√©ma public
psql -v ON_ERROR_STOP=1 --username="$PG_SUPERUSER" --dbname="$PG_PROJECT_DB" <<-EOSQL
GRANT CONNECT ON DATABASE $PG_PROJECT_DB TO $PG_PROJECT_USER;
GRANT USAGE ON SCHEMA public TO $PG_PROJECT_USER;

-- Droits complets sur les tables existantes
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO $PG_PROJECT_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $PG_PROJECT_USER;

-- Droits complets sur les s√©quences existantes
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO $PG_PROJECT_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $PG_PROJECT_USER;

-- Droits sur le sch√©ma
GRANT ALL ON SCHEMA public TO $PG_PROJECT_USER;

-- Droits par d√©faut pour les nouvelles tables et s√©quences
ALTER DEFAULT PRIVILEGES IN SCHEMA public
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO $PG_PROJECT_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $PG_PROJECT_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $PG_PROJECT_USER;
EOSQL


echo "‚úÖ Base $PG_PROJECT_DB et utilisateur $PG_PROJECT_USER configur√©s avec succ√®s pour ce projet."
